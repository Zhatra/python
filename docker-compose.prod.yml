services:
  database:
    image: postgres:15-alpine
    container_name: prueba_tecnica_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-prueba_tecnica}
      POSTGRES_USER: ${DB_USER:-testuser}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-testuser} -d ${DB_NAME:-prueba_tecnica}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - prueba_tecnica_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: prueba_tecnica_api_prod
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-prueba_tecnica}
      - DB_USER=${DB_USER:-testuser}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - PYTHONPATH=/app
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
    secrets:
      - db_password
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - prueba_tecnica_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

secrets:
  db_password:
    file: ./secrets/db_password.txt

volumes:
  postgres_data_prod:

networks:
  prueba_tecnica_network:
    driver: bridge